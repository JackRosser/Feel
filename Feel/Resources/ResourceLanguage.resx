<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Alimentazione" xml:space="preserve">
    <value>Alimentazione</value>
  </data>
  <data name="Animali" xml:space="preserve">
    <value>Animali</value>
  </data>
  <data name="Arte" xml:space="preserve">
    <value>Arte</value>
  </data>
  <data name="Auto" xml:space="preserve">
    <value>Auto</value>
  </data>
  <data name="Bellezza" xml:space="preserve">
    <value>Bellezza</value>
  </data>
  <data name="Benessere" xml:space="preserve">
    <value>Benessere</value>
  </data>
  <data name="Casa" xml:space="preserve">
    <value>Casa</value>
  </data>
  <data name="Cultura" xml:space="preserve">
    <value>Cultura</value>
  </data>
  <data name="Educazione" xml:space="preserve">
    <value>Educazione</value>
  </data>
  <data name="Eventi" xml:space="preserve">
    <value>Eventi</value>
  </data>
  <data name="Famiglia" xml:space="preserve">
    <value>Famiglia</value>
  </data>
  <data name="InserisciCategoria" xml:space="preserve">
    <value>Inserisci una categoria</value>
  </data>
  <data name="InserisciData" xml:space="preserve">
    <value>Inserisci una data di scadenza</value>
  </data>
  <data name="InserisciTitolo" xml:space="preserve">
    <value>Inserisci un titolo</value>
  </data>
  <data name="Lavoro" xml:space="preserve">
    <value>Lavoro</value>
  </data>
  <data name="MassimoDiciottoCaratteri" xml:space="preserve">
    <value>Massimo 18 caratteri</value>
  </data>
  <data name="MessaggioAssistenteAbout" xml:space="preserve">
    <value>Informazioni sull'app</value>
  </data>
  <data name="MessaggioAssistenteAggiuntaObiettivo" xml:space="preserve">
    <value>Aggiungi un obiettivo</value>
  </data>
  <data name="MessaggioAssistenteAreaUtente" xml:space="preserve">
    <value>Area utente</value>
  </data>
  <data name="MessaggioAssistenteCambiaTema" xml:space="preserve">
    <value>Cambia il tema</value>
  </data>
  <data name="Moda" xml:space="preserve">
    <value>Moda</value>
  </data>
  <data name="Musica" xml:space="preserve">
    <value>Musica</value>
  </data>
  <data name="Natura" xml:space="preserve">
    <value>Natura</value>
  </data>
  <data name="Politica" xml:space="preserve">
    <value>Politica</value>
  </data>
  <data name="Religione" xml:space="preserve">
    <value>Religione</value>
  </data>
  <data name="Risparmio" xml:space="preserve">
    <value>Risparmio</value>
  </data>
  <data name="Salute" xml:space="preserve">
    <value>Salute</value>
  </data>
  <data name="Scadenza" xml:space="preserve">
    <value>Scadenza</value>
  </data>
  <data name="Sport" xml:space="preserve">
    <value>Sport</value>
  </data>
  <data name="Tecnologia" xml:space="preserve">
    <value>Tecnologia</value>
  </data>
  <data name="TempoLibero" xml:space="preserve">
    <value>Tempo libero</value>
  </data>
  <data name="Obiettivo" xml:space="preserve">
    <value>Obiettivo</value>
  </data>
  <data name="Viaggi" xml:space="preserve">
    <value>Viaggi</value>
  </data>
  <data name="PlaceholderObiettivo" xml:space="preserve">
    <value>Dai un titolo al tuo obiettivo...</value>
  </data>
  <data name="Seleziona" xml:space="preserve">
    <value>--Seleziona--</value>
  </data>
  <data name="Categoria" xml:space="preserve">
    <value>Categoria</value>
  </data>
  <data name="Descrizione" xml:space="preserve">
    <value>Descrizione (Opzionale)</value>
  </data>
  <data name="PlaceholderDescrizione" xml:space="preserve">
    <value>Descrivi il tuo obiettivo...</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="PlaceholderTarget" xml:space="preserve">
    <value>Definisci un target...</value>
  </data>
  <data name="InserisciTarget" xml:space="preserve">
    <value>Inserisci un target</value>
  </data>
  <data name="CheckPeriodico" xml:space="preserve">
    <value>Check periodico</value>
  </data>
  <data name="InfoTarget" xml:space="preserve">
    <value>Definisci un valore numerico che vuoi raggiungere in base all'obiettivo prefissato. Ad esempio, se vuoi risparmiare 1.000 euro, il &lt;b&gt;Target&lt;/b&gt; che dovrai scrivere sarà 1.000, e quando lo raggiungerai, l'obiettivo sarà classificato come &lt;b&gt;Completato&lt;/b&gt;. Se invece vuoi correre 10km ogni giorno per una settimana, fissa il tuo &lt;b&gt;Target&lt;/b&gt; a 7 e spunta &lt;b&gt;Check Periodico&lt;/b&gt;, così da aggiungere automaticamente un +1 ogni volta che eseguirai un check.</value>
  </data>
  <data name="InfoCheck" xml:space="preserve">
    <value>Stabilisci se questo obiettivo sarà aggiornato attraverso check periodici. Ad esempio, se il tuo obiettivo è leggere 10 libri, fissa il tuo &lt;b&gt;Target&lt;/b&gt; a 10 e spunta &lt;b&gt;Check Periodico&lt;/b&gt; così da eseguire un +1 ad ogni check.</value>
  </data>
  <data name="Chiudi" xml:space="preserve">
    <value>Chiudi</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Salva" xml:space="preserve">
    <value>Salva</value>
  </data>
  <data name="Annulla" xml:space="preserve">
    <value>Annulla</value>
  </data>
  <data name="Aggiornamento" xml:space="preserve">
    <value>Aggiornamento</value>
  </data>
  <data name="InserisciValore" xml:space="preserve">
    <value>Inserisci un valore...</value>
  </data>
  <data name="AvvicinatiTarget" xml:space="preserve">
    <value>Inserisci un importo o un valore numerico inerente al tuo obiettivo per avvicinarti o raggiungere il Target.</value>
  </data>
  <data name="TargetMaggioreDiZero" xml:space="preserve">
    <value>Inserisci un valore maggiore di zero</value>
  </data>
  <data name="SpuntaCasella" xml:space="preserve">
    <value>Spunta la casella</value>
  </data>
  <data name="Ciao" xml:space="preserve">
    <value>Ciao</value>
  </data>
  <data name="DashboardEccoObiettivi" xml:space="preserve">
    <value>ecco i tuoi obiettivi</value>
  </data>
  <data name="VerificaAggiornamenti" xml:space="preserve">
    <value>Verifica aggiornamenti in corso...</value>
  </data>
  <data name="Attuale" xml:space="preserve">
    <value>Attuale</value>
  </data>
  <data name="GiorniScadenza" xml:space="preserve">
    <value>giorni alla scadenza</value>
  </data>
  <data name="Mancano" xml:space="preserve">
    <value>Mancano</value>
  </data>
  <data name="TermineObiettivo" xml:space="preserve">
    <value>Termine</value>
  </data>
  <data name="Inizio" xml:space="preserve">
    <value>Inizio</value>
  </data>
  <data name="DataCompletamento" xml:space="preserve">
    <value>Completato</value>
  </data>
  <data name="NessunaDescrizione" xml:space="preserve">
    <value>--Nessuna descrizione disponibile--</value>
  </data>
  <data name="Filtra" xml:space="preserve">
    <value>Filtra</value>
  </data>
  <data name="Completati" xml:space="preserve">
    <value>Completati</value>
  </data>
  <data name="NonCompletati" xml:space="preserve">
    <value>Non completati</value>
  </data>
  <data name="Stato" xml:space="preserve">
    <value>Stato</value>
  </data>
  <data name="MostraFiltri" xml:space="preserve">
    <value>Mostra filtri</value>
  </data>
  <data name="NascondiFiltri" xml:space="preserve">
    <value>Nascondi filtri</value>
  </data>
  <data name="Ordina" xml:space="preserve">
    <value>Ordina</value>
  </data>
  <data name="OrdinaPiuRecente" xml:space="preserve">
    <value>Dal più recente</value>
  </data>
  <data name="OrdinaMenoRecente" xml:space="preserve">
    <value>Dal meno recente</value>
  </data>
  <data name="InserisciNome" xml:space="preserve">
    <value>Inserisci il tuo nome</value>
  </data>
  <data name="MassimoDieciCaratteri" xml:space="preserve">
    <value>Massimo 10 caratteri</value>
  </data>
  <data name="Avanti" xml:space="preserve">
    <value>Avanti</value>
  </data>
  <data name="Indietro" xml:space="preserve">
    <value>Indietro</value>
  </data>
</root>